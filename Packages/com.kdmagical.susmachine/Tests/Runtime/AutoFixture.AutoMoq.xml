<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoFixture.AutoMoq</name>
    </assembly>
    <members>
        <member name="T:AutoFixture.AutoMoq.AutoConfiguredMoqCustomization">
            <summary>
            Enables auto-mocking and auto-setup with Moq.
            Members of a mock will be automatically setup to retrieve the return values from a fixture.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.AutoConfiguredMoqCustomization.#ctor">
            <summary>
            Creates a new instance of <see cref="T:AutoFixture.AutoMoq.AutoConfiguredMoqCustomization"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.AutoConfiguredMoqCustomization.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Creates a new instance of <see cref="T:AutoFixture.AutoMoq.AutoConfiguredMoqCustomization"/>.
            </summary>
        </member>
        <member name="T:AutoFixture.AutoMoq.AutoMockPropertiesCommand">
            <summary>
            A command that populates all public writable properties/fields of a mock object with anonymous values.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.AutoMockPropertiesCommand.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Populates all public writable properties/fields of a mock object with anonymous values.
            </summary>
            <param name="specimen">The mock object whose properties/fields will be populated.</param>
            <param name="context">The context that is used to create anonymous values.</param>
        </member>
        <member name="T:AutoFixture.AutoMoq.AutoMockPropertiesCommand.IgnoreProxyMembersSpecification">
            <summary>
            Evaluates whether a request to populate a member is valid.
            The request is valid if the member is a property or a field,
            except for fields generated by Castle's DynamicProxy.
            </summary>
        </member>
        <member name="T:AutoFixture.AutoMoq.AutoMoqCustomization">
            <summary>
            Enables auto-mocking with Moq.
            </summary>
            <remarks>
            NOTICE! You can assign the customization properties to tweak the features you would like to enable. See example.
            <br />
            <code>new AutoMoqCustomization { ConfigureMembers = true }</code>
            </remarks>
        </member>
        <member name="M:AutoFixture.AutoMoq.AutoMoqCustomization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.AutoMoq.AutoMoqCustomization"/> class.
            <para>
            NOTICE! You can assign the customization properties to tweak the features you would like to enable. Example:
            <br />
            <code>new AutoMoqCustomization { ConfigureMembers = true }</code>
            </para>
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.AutoMoqCustomization.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.AutoMoq.AutoMoqCustomization"/> class with a
            <see cref="T:AutoFixture.AutoMoq.MockRelay"/>.
            </summary>
            <param name="relay">The relay.</param>
        </member>
        <member name="P:AutoFixture.AutoMoq.AutoMoqCustomization.ConfigureMembers">
            <summary>
            Specifies whether members of a mock will be automatically setup to retrieve the return values from a fixture.
            </summary>
        </member>
        <member name="P:AutoFixture.AutoMoq.AutoMoqCustomization.GenerateDelegates">
            <summary>
            If value is <c>true</c>, delegate requests are intercepted and created by Moq.
            Otherwise, if value is <c>false</c>, delegates are created by the AutoFixture kernel.
            </summary>
        </member>
        <member name="P:AutoFixture.AutoMoq.AutoMoqCustomization.Relay">
            <summary>
            Gets or sets the relay that will be added to <see cref="P:AutoFixture.IFixture.ResidueCollectors"/> when
            <see cref="M:AutoFixture.AutoMoq.AutoMoqCustomization.Customize(AutoFixture.IFixture)"/> is invoked.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.AutoMoqCustomization.Customize(AutoFixture.IFixture)">
            <summary>
            Customizes an <see cref="T:AutoFixture.IFixture"/> to enable auto-mocking with Moq.
            </summary>
            <param name="fixture">The fixture upon which to enable auto-mocking.</param>
        </member>
        <member name="M:AutoFixture.AutoMoq.Extensions.TypeExtensions.GetAllMethods(System.Type)">
            <summary>
            Gets a collection of all methods declared by the type or any of its base interfaces.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.Extensions.TypeExtensions.GetAllProperties(System.Type)">
            <summary>
            Gets a collection of all properties declared by the type or any of its base interfaces.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.Extensions.TypeExtensions.IsDelegate(System.Type)">
            <summary>
            Returns whether or not a type represents a delegate.
            </summary>
        </member>
        <member name="T:AutoFixture.AutoMoq.GreedyMockConstructorQuery">
            <summary>
            Selects appropriate constructors to create <see cref="T:Moq.Mock`1"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.GreedyMockConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects constructors for the supplied <see cref="T:Moq.Mock`1"/> type.
            </summary>
            <param name="type">The mock type.</param>
            <returns>
            Constructors for <paramref name="type"/>.
            </returns>
            <remarks>
            <para>
            This method only returns constructors if <paramref name="type"/> is a
            <see cref="T:Moq.Mock`1"/> type. If not, an empty sequence is returned.
            </para>
            <para>
            If the type is the type of a constructed <see cref="T:Moq.Mock`1"/>, constructors are
            returned according to the generic type argument's constructors. If the type is an
            interface, the <see cref="M:Moq.Mock`1.#ctor"/> default constructor is returned. If the type
            is a class, constructors are returned according to all the public and protected
            constructors of the underlying type. In this case, the
            <see cref="M:Moq.Mock`1.#ctor(System.Object[])"/> constructor that takes a params array is returned
            for each underlying constructor, with information about the appropriate parameters for
            each constructor.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.AutoMoq.MockConstructorQuery">
            <summary>
            Selects appropriate constructors to create <see cref="T:Moq.Mock`1"/> instances.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockConstructorQuery.SelectMethods(System.Type)">
            <summary>
            Selects constructors for the supplied <see cref="T:Moq.Mock`1"/> type.
            </summary>
            <param name="type">The mock type.</param>
            <returns>
            Constructors for <paramref name="type"/>.
            </returns>
            <remarks>
            <para>
            This method only returns constructors if <paramref name="type"/> is a
            <see cref="T:Moq.Mock`1"/> type. If not, an empty sequence is returned.
            </para>
            <para>
            If the type is the type of a constructed <see cref="T:Moq.Mock`1"/>, constructors are
            returned according to the generic type argument's constructors. If the type is an
            interface, the <see cref="M:Moq.Mock`1.#ctor"/> default constructor is returned. If the type
            is a class, constructors are returned according to all the public and protected
            constructors of the underlying type. In this case, the
            <see cref="M:Moq.Mock`1.#ctor(System.Object[])"/> constructor that takes a params array is returned
            for each underlying constructor, with information about the appropriate parameters for
            each constructor.
            </para>
            </remarks>
        </member>
        <member name="T:AutoFixture.AutoMoq.MockPostprocessor">
            <summary>
            Post-processes a <see cref="T:Moq.Mock`1"/> instance by setting appropriate default behavioral
            values.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockPostprocessor.#ctor(AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.AutoMoq.MockPostprocessor"/> class with the
            supplied <see cref="T:AutoFixture.Kernel.ISpecimenBuilder"/>.
            </summary>
            <param name="builder">
            The builder which is expected to create <see cref="T:Moq.Mock`1"/> instances.
            </param>
        </member>
        <member name="P:AutoFixture.AutoMoq.MockPostprocessor.Builder">
            <summary>
            Gets the builder decorated by this instance.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockPostprocessor.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Modifies a <see cref="T:Moq.Mock`1"/> instance created by <see cref="P:AutoFixture.AutoMoq.MockPostprocessor.Builder"/>.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            The specimen created by <see cref="P:AutoFixture.AutoMoq.MockPostprocessor.Builder"/>. If the instance is a correct
            <see cref="T:Moq.Mock`1"/> instance, this instance modifies it before returning it.
            </returns>
        </member>
        <member name="T:AutoFixture.AutoMoq.MockRelay">
            <summary>
            Relays a request for an interface or an abstract class to a request for a
            <see cref="T:Moq.Mock`1"/> of that class.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockRelay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.AutoMoq.MockRelay"/> class.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockRelay.#ctor(AutoFixture.Kernel.IRequestSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:AutoFixture.AutoMoq.MockRelay"/> class with a specification
            that determines whether a type should be mocked.
            </summary>
            <param name="mockableSpecification">
            A specification that determines whether a type should be mocked or not.
            </param>
        </member>
        <member name="P:AutoFixture.AutoMoq.MockRelay.MockableSpecification">
            <summary>
            Gets a specification that determines whether a given request should
            be mocked.
            </summary>
            <value>The specification.</value>
            <remarks>
            <para>
            This specification determines whether a given type should be
            relayed as a request for a mock of the same type. By default it
            only returns <see langword="true"/> for interfaces and abstract
            classes, but a different specification can be supplied by using the
            overloaded constructor that takes an
            <see cref="T:AutoFixture.Kernel.IRequestSpecification" /> as input. In that case, this
            property returns the specification supplied to the constructor.
            </para>
            </remarks>
            <seealso cref="M:AutoFixture.AutoMoq.MockRelay.#ctor(AutoFixture.Kernel.IRequestSpecification)" />
        </member>
        <member name="M:AutoFixture.AutoMoq.MockRelay.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Creates a new specimen based on a request.
            </summary>
            <param name="request">The request that describes what to create.</param>
            <param name="context">A context that can be used to create other specimens.</param>
            <returns>
            A dynamic mock instance of the requested interface or abstract class if possible;
            otherwise a <see cref="T:AutoFixture.Kernel.NoSpecimen"/> instance.
            </returns>
        </member>
        <member name="T:AutoFixture.AutoMoq.MockSealedPropertiesCommand">
            <summary>
            If the type of the object being mocked contains any fields and/or non-virtual/sealed settable properties,
            this initializer will resolve them from a given context.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockSealedPropertiesCommand.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            If the type of the object being mocked contains any fields and/or non-virtual/sealed settable properties,
            this initializer will resolve them from a given context.
            </summary>
            <param name="specimen">The mock object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockSealedPropertiesCommand.MockSealedPropertySpecification.IsSatisfiedBy(System.Object)">
            <summary>
            Satisfied by any fields and non-virtual/sealed properties.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockSealedPropertiesCommand.MockSealedPropertySpecification.IsDynamicProxyMember(System.Reflection.FieldInfo)">
            <summary>
            Checks whether a <see cref="T:System.Reflection.FieldInfo"/> belongs to a dynamic proxy.
            </summary>
        </member>
        <member name="T:AutoFixture.AutoMoq.MockType">
            <summary>
            Contains extension methods to manipulate/setup instances of <see cref="T:Moq.Mock`1"/>.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockType.ReturnsUsingFixture``2(Moq.Language.IReturns{``0,``1},AutoFixture.Kernel.ISpecimenBuilder)">
            <summary>
            Sets up a member to lazily retrieve the return value from a fixture.
            </summary>
            <typeparam name="TMock">The type of the object being mocked.</typeparam>
            <typeparam name="TResult">The return type of the object's member being mocked.</typeparam>
            <param name="setup">The member setup.</param>
            <param name="fixture">The fixture from which the return value will be retrieved.</param>
            <returns>The result of setting up <paramref name="setup"/> to retrieve the return value from <paramref name="fixture"/>.</returns>
        </member>
        <member name="T:AutoFixture.AutoMoq.MockVirtualMethodsCommand">
             <summary>
             Sets up a mocked object's methods so that the return values will be retrieved from a fixture,
             instead of being created directly by Moq.
            
             This will setup any virtual methods that are either non-void or have "out" parameters.
             </summary>
             <remarks>
             This will setup any virtual methods that are either non-void or have "out" parameters.
             This includes:
              - interface's methods/property getters;
              - class's abstract/virtual/overridden/non-sealed methods/property getters.
            
             Notes:
             - Due to a limitation in Moq, methods with "ref" parameters are skipped.
             - Automatic mocking of generic methods isn't feasible either - we'd have to antecipate any type parameters that this method could be called with.
             - To not interfere with other post-processors in the chain we skip getters for properties that have both getters and setters.
             </remarks>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockVirtualMethodsCommand.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Sets up a mocked object's methods so that the return values will be retrieved from a fixture,
            instead of being created directly by Moq.
            </summary>
            <param name="specimen">The mock to setup.</param>
            <param name="context">The context of the mock.</param>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockVirtualMethodsCommand.SetupVoidMethod``1(Moq.Mock{``0},System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Sets up a void method.
            </summary>
            <typeparam name="TMock">The type of the object being mocked.</typeparam>
            <param name="mock">The mock being set up.</param>
            <param name="methodCallExpression">An expression representing a call to the method being set up.</param>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockVirtualMethodsCommand.SetupMethod``2(Moq.Mock{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Sets up a non-void method.
            </summary>
            <typeparam name="TMock">The type of the object being mocked.</typeparam>
            <typeparam name="TResult">The return type of the method being set up.</typeparam>
            <param name="mock">The mock being set up.</param>
            <param name="methodCallExpression">An expression representing a call to the method being set up.</param>
            <param name="context">The context that will be used to resolve the method's return value.</param>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockVirtualMethodsCommand.GetConfigurableMethods(System.Type)">
            <summary>
            Gets a list of methods to configure.
            </summary>
            <param name="type">The type being mocked and whose methods need to be configured.</param>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockVirtualMethodsCommand.CanBeConfigured(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method can be mocked.
            </summary>
            <param name="method">The candidate method.</param>
            <returns>Whether <paramref name="method"/> can be configured.</returns>
        </member>
        <member name="M:AutoFixture.AutoMoq.MockVirtualMethodsCommand.MakeMethodInvocationLambda(System.Type,System.Reflection.MethodInfo,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Returns a lambda expression thats represents an invocation of a mocked type's method.
            E.g.,. <![CDATA[ x => x.Method(It.IsAny<string>(), out parameter) ]]>
            </summary>
        </member>
        <member name="T:AutoFixture.AutoMoq.StubPropertiesCommand">
            <summary>
            Stubs a mocked object's properties, giving them "property behavior".
            Setting a property's value will cause it to be saved and later returned when the property is accessed.
            </summary>
        </member>
        <member name="M:AutoFixture.AutoMoq.StubPropertiesCommand.Execute(System.Object,AutoFixture.Kernel.ISpecimenContext)">
            <summary>
            Stubs a mocked object's properties, giving them "property behavior".
            Setting a property's value will cause it to be saved and later returned when the property is accessed.
            </summary>
            <param name="specimen">The mock to setup.</param>
            <param name="context">The context of the mock.</param>
        </member>
    </members>
</doc>
